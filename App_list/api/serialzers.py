from rest_framework import serializers
from App_list.models import Striming, WatchList, Public



class PublicSerialzers(serializers.ModelSerializer):
    Public_user = serializers.StringRelatedField(read_only=True)


    class Meta:
        model = Public
        fields = "__all__"




class WatchListSerilazer(serializers.ModelSerializer):
    #url = serializers.HyperlinkedIdentityField(view_name="moviedetails")
    #Publics = PublicSerialzers(many = True, read_only=True)

    

    class Meta:
        model = WatchList  
        fields = "__all__"




class StrimingSerilazer(serializers.ModelSerializer):
    # Nesteed Serialzers
    #url = serializers.HyperlinkedIdentityField(view_name="moviedetails")
    WatchList = WatchListSerilazer(many=True, read_only=True)
    # WatchList = serializers.PrimaryKeyRelatedField(many = True, read_only = True)

    # WatchList = serializers.HyperlinkedRelatedField(many = True, read_only = True, view_name='moviedetails')


    

    

    class Meta:
        model = Striming  
        fields = "__all__"
            #fields = ('id', 'name', 'description')
            #exclude = ['name']

    # def get_len_name(self, object):
    #  return len(object.name)

    # def validate(self, data):
    #     if data['name'] == data['description']:
    #         raise serializers.ValidationError("Pleace check the data To same value!")
    #     return data       
        

    # def name_length(self, value):
    #     if len(value) < 6:
    #             raise serializers.ValidationError("Name To Short pleace check!")
    #     else:
    #         return value
            


# class MovieSerilazer(serializers.Serializer):
#     id = serializers.IntegerField(read_only=True)
#     name = serializers.CharField(validators=[name_length])
#     description = serializers.CharField(max_length=200)
#     active = serializers.BooleanField(default=True)


#     def create(self, validated_data):

#         return Movie.objects.create(**validated_data)
    
#     def update(self, instance, validated_data):
#         instance.name = validated_data.get('name')
#         instance.description = validated_data.get('description')
#         instance.active = validated_data.get('active')
#         instance.save()


#     def validate(self, data):
#         if data['name'] == data['description']:
#             raise serializers.ValidationError("Pleace check the data To same value!")
#         return data
    


    # def validate_description(self, value):
    #     if len(value) < 6:
    #         raise serializers.ValidationError("Description To Short pleace check!")
    #     return value
        










































































































































































































































































































































































































































































































































































































































    from django.utils.translation import ungettext

































































































































































































































































































































































































































































































